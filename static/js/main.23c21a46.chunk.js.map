{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortField","goodsFromServer","App","useState","sortField","setSortField","isReverse","setIsReverse","goods","preparedGoods","sort","good1","good2","Alphabet","localeCompare","Length","length","reverse","getPreparedGoods","doSort","className","onClick","type","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,oBAAAA,E,iBAAAA,M,KAeL,IAuBaE,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAkCF,oBAAS,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KAEMC,EA3BuB,SAACA,EAAD,GAAsC,IAA5BJ,EAA2B,EAA3BA,UAAWE,EAAgB,EAAhBA,UAC5CG,EAAa,YAAOD,GAmB1B,OAjBIJ,GACFK,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQR,GACN,KAAKJ,EAAUa,SACb,OAAOF,EAAMG,cAAcF,GAC7B,KAAKZ,EAAUe,OACb,OAAOJ,EAAMK,OAASJ,EAAMI,OAC9B,QACE,OAAO,MAKXV,GACFG,EAAcQ,UAGTR,EAOOS,CAAiBjB,EAAiB,CAAEG,YAAWE,cAEvDa,EAAS,SAACT,GAAD,OAAkB,kBAAML,EAAaK,KAQpD,OACE,sBAAKU,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAASF,EAAOnB,EAAUa,UAC1BS,KAAK,SACLF,UACEG,IAAG,iBAAkB,CAAE,WAA0B,aAAdnB,IAJvC,iCAUA,wBACEiB,QAASF,EAAOnB,EAAUe,QAC1BO,KAAK,SACLF,UACEG,IAAG,oBAAqB,CAAE,WAA0B,WAAdnB,IAJ1C,4BAUA,wBACEiB,QA/BU,kBAAMd,GAAcD,IAgC9BgB,KAAK,SACLF,UACEG,IAAG,oBAAqB,CAAE,YAAajB,IAJ3C,sBAUEA,GAAaF,IAEX,wBACEiB,QAzCE,WACZhB,EAAa,IACbE,GAAa,IAwCHe,KAAK,SACLF,UAAU,4BAHZ,sBAUN,6BACGZ,EAAMgB,KAAI,SAAAC,GAAI,OACb,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YClHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.23c21a46.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortField {\n  Alphabet = 'alphabet',\n  Length = 'length',\n}\n\ntype StateType = {\n  sortField: string,\n  isReverse: boolean,\n};\n\ntype Func = (\n  goods: string[],\n  { sortField, isReverse }: StateType\n) => string[];\n\nconst getPreparedGoods: Func = (goods, { sortField, isReverse }) => {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortField.Alphabet:\n          return good1.localeCompare(good2);\n        case SortField.Length:\n          return good1.length - good2.length;\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n};\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReverse, setIsReverse] = useState(false);\n\n  const goods = getPreparedGoods(goodsFromServer, { sortField, isReverse });\n\n  const doSort = (sort: string) => () => setSortField(sort);\n  const doReverse = () => setIsReverse(!isReverse);\n\n  const reset = () => {\n    setSortField('');\n    setIsReverse(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={doSort(SortField.Alphabet)}\n          type=\"button\"\n          className={\n            cn('button is-info', { 'is-light': sortField !== 'alphabet' })\n          }\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={doSort(SortField.Length)}\n          type=\"button\"\n          className={\n            cn('button is-success', { 'is-light': sortField !== 'length' })\n          }\n        >\n          Sort by length\n        </button>\n\n        <button\n          onClick={doReverse}\n          type=\"button\"\n          className={\n            cn('button is-warning', { 'is-light': !isReverse })\n          }\n        >\n          Reverse\n        </button>\n\n        {(isReverse || sortField)\n          && (\n            <button\n              onClick={reset}\n              type=\"button\"\n              className=\"button is-danger is-light\"\n            >\n              Reset\n            </button>\n          )}\n      </div>\n\n      <ul>\n        {goods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}